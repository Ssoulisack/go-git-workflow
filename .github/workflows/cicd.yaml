name: Go CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    # tags: ['v*.*.*']  # match any version like v1.0.0, v1.2.0

env:
  APP_NAME: go-fiber
  DOCKER_IMAGE: 24thurs/go-fiber

jobs:
  build-and-push:
    name: 🛠️ Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Read version from file
        id: read_version
        run: |
          if [ ! -f version ]; then
            echo "❌ version file not found!"
            exit 1
          fi
          VERSION=$(cat version)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set Docker Tags
        id: vars
        run: |
          VERSION=${{ steps.read_version.outputs.version }}
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${GITHUB_REF}" == refs/heads/develop ]]; then
            VERSION=dev-${GITHUB_SHA::7}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create config.yaml from Secret
        run: |
          echo "${{ secrets.APP_CONFIG_YAML }}" > config.yaml

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.vars.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    name: 🚀 Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Copy config.yaml to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          echo "${{ secrets.APP_CONFIG_YAML }}" > config.yaml

          scp -o StrictHostKeyChecking=no -i private_key.pem config.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/config.yaml
      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            docker stop go-fiber || true
            docker rm go-fiber || true
            docker run -d --name go-fiber -p 80:3000 ${{ env.DOCKER_IMAGE }}:latest
          EOF
