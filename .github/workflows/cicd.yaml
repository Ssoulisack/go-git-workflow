name: Go CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    # tags: ['v*.*.*']

env:
  APP_NAME: go-fiber
  DOCKER_IMAGE: 24thurs/go-fiber

jobs:
  build-and-push:
    name: 🛠️ Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Detect Docker-related file changes
        id: changes
        run: |
          git fetch origin main
          CHANGED=$(git diff --name-only origin/main...HEAD | grep -E 'Dockerfile|\.go$|go\.mod|go\.sum|config\.yaml|\.env' || true)
          echo "Changed files: $CHANGED"
          if [ -n "$CHANGED" ]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
          else
            echo "run_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.changes.outputs.run_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: steps.changes.outputs.run_build == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Read version from file
        id: read_version
        if: steps.changes.outputs.run_build == 'true'
        run: |
          if [ ! -f version ]; then
            echo "❌ version file not found!"
            exit 1
          fi
          VERSION=$(cat version)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set Docker Tags
        id: vars
        if: steps.changes.outputs.run_build == 'true'
        run: |
          VERSION=${{ steps.read_version.outputs.version }}
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${GITHUB_REF}" == refs/heads/develop ]]; then
            VERSION=dev-${GITHUB_SHA::7}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create config.yaml from Secret
        if: steps.changes.outputs.run_build == 'true'
        run: |
          echo "${{ secrets.APP_CONFIG_YAML }}" > config.yaml

      - name: Build and Push Docker Image
        if: steps.changes.outputs.run_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.vars.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:latest

  # deploy:
  #   name: 🚀 Deploy to AWS EC2
  #   runs-on: ubuntu-latest
  #   needs: build-and-push

  #   steps:
  #     - name: Copy config.yaml to EC2
  #       run: |
  #         echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
  #         chmod 600 private_key.pem
  #         echo "${{ secrets.APP_CONFIG_YAML }}" > config.yaml
  #         scp -o StrictHostKeyChecking=no -i private_key.pem config.yaml ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/config.yaml

  #     - name: Deploy via SSH
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
  #           docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
  #           docker pull ${{ env.DOCKER_IMAGE }}:latest
  #           docker stop go-fiber || true
  #           docker rm go-fiber || true
  #           docker run -d --name go-fiber -p 3000:3000 ${{ env.DOCKER_IMAGE }}:latest
  #         EOF
